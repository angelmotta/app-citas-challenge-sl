// <auto-generated />
using System;
using Citas_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Citas_API.Data.Migrations
{
    [DbContext(typeof(AppStoreContext))]
    partial class AppStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Citas_API.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocIdType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumDocId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Citas_API.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dermatología"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cardiología"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pediatría"
                        });
                });

            modelBuilder.Entity("Citas_API.Entities.Appointment", b =>
                {
                    b.HasOne("Citas_API.Entities.Specialty", "SpecialtyAppointment")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecialtyAppointment");
                });
#pragma warning restore 612, 618
        }
    }
}
